Big Data, Homework 2, 
	Hichem Belhocine, 18-206-722, UniFR	
	Timo Spring, 13-103-692 UniBE



1. Case: Column Store performs better than row store. 

PREPARATION: 
**********************
create table orders2 (like orders) with (appendonly=true, orientation=row); 
insert into orders2 select * from orders;

CREATE TABLE customer2 (LIKE customer) WITH (appendonly=true, orientation=row);
insert into customer2 select * from customer;

CREATE TABLE nation2 (LIKE nation) WITH (appendonly=true, orientation=row); 
insert into nation2 select * from customer; 

CREATE TABLE lineitem2 (LIKE lineitem) WITH (appendonly=true, orientation=row); 
insert into lineitem2 select * from lineitem; 

CREATE TABLE supplier2 (LIKE supplier) WITH (appendonly=true, orientation=row); 
insert into supplier2 select * from supplier; 

 
COLUMN STORE (QUERY A)
**********************
select sum(l_tax) 
from lineitem 
join orders on o_orderkey=l_orderkey 
join customer on c_custkey=o_custkey 
where c_custkey=1;

Time: 8793.582 ms

****************************************************************

QUERY A PLAN                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..6370.45 rows=1 width=8)
   ->  Gather Motion 2:1  (slice3; segments: 2)  (cost=0.00..6370.45 rows=1 width=8)
         ->  Aggregate  (cost=0.00..6370.45 rows=1 width=8)
               ->  Hash Join  (cost=0.00..6370.45 rows=3 width=6)
                     Hash Cond: lineitem.l_orderkey = orders.o_orderkey
                     ->  Sequence  (cost=0.00..1610.74 rows=14999900 width=14)
                           ->  Partition Selector for lineitem (dynamic scan id: 1)  (cost=10.00..100.00 rows=50 width=4)
                                 Partitions selected: 87 (out of 87)
                           ->  Dynamic Table Scan on lineitem (dynamic scan id: 1)  (cost=0.00..1610.74 rows=14999900 width=14)
                     ->  Hash  (cost=1424.24..1424.24 rows=1 width=8)
                           ->  Broadcast Motion 2:2  (slice2; segments: 2)  (cost=0.00..1424.24 rows=1 width=8)
                                 ->  Hash Join  (cost=0.00..1424.24 rows=1 width=8)
                                       Hash Cond: orders.o_custkey = customer.c_custkey
                                       ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=0.00..945.01 rows=1 width=12)
                                             Hash Key: orders.o_custkey
                                             ->  Sequence  (cost=0.00..945.01 rows=1 width=12)
                                                   ->  Partition Selector for orders (dynamic scan id: 2)  (cost=10.00..100.00 rows=50 width=4)
                                                         Partitions selected: 87 (out of 87)
                                                   ->  Dynamic Table Scan on orders (dynamic scan id: 2)  (cost=0.00..945.01 rows=1 width=12)
                                                         Filter: o_custkey = 1
                                       ->  Hash  (cost=479.23..479.23 rows=1 width=4)
                                             ->  Table Scan on customer  (cost=0.00..479.23 rows=1 width=4)
                                                   Filter: c_custkey = 1
 Optimizer status: PQO version 2.56.3
(24 rows)

****************************************************************



ROW STORE (QUERY B)
**********************
select sum(l_tax) 
from lineitem2 
join orders2 on o_orderkey=l_orderkey 
join customer2 on c_custkey=o_custkey 
where c_custkey=1;

Time: 38407.453 ms


****************************************************************

QUERY B PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..1726.74 rows=1 width=8)
   ->  Gather Motion 2:1  (slice4; segments: 2)  (cost=0.00..1726.74 rows=1 width=8)
         ->  Aggregate  (cost=0.00..1726.74 rows=1 width=8)
               ->  Hash Join  (cost=0.00..1726.74 rows=1 width=8)
                     Hash Cond: lineitem2.l_orderkey = orders2.o_orderkey
                     ->  Redistribute Motion 2:2  (slice1; segments: 2)  (cost=0.00..431.00 rows=1 width=16)
                           Hash Key: lineitem2.l_orderkey
                           ->  Table Scan on lineitem2  (cost=0.00..431.00 rows=1 width=16)
                     ->  Hash  (cost=1295.74..1295.74 rows=1 width=8)
                           ->  Redistribute Motion 2:2  (slice3; segments: 2)  (cost=0.00..1295.74 rows=1 width=8)
                                 Hash Key: orders2.o_orderkey
                                 ->  Hash Join  (cost=0.00..1295.74 rows=1 width=8)
                                       Hash Cond: orders2.o_custkey = customer2.c_custkey
                                       ->  Redistribute Motion 2:2  (slice2; segments: 2)  (cost=0.00..816.31 rows=1 width=12)
                                             Hash Key: orders2.o_custkey
                                             ->  Table Scan on orders2  (cost=0.00..816.31 rows=1 width=12)
                                                   Filter: o_custkey = 1
                                       ->  Hash  (cost=479.43..479.43 rows=1 width=4)
                                             ->  Table Scan on customer2  (cost=0.00..479.43 rows=1 width=4)
                                                   Filter: c_custkey = 1
 Optimizer status: PQO version 2.56.3
(21 rows)
****************************************************************

EXPLANATION: 
**********************
Both queries are scanning first the customer table and already filter it for custkey=1 returning only one row with 4 bytes. Both queries require approx. 480 page reads to do so (cost). Then the returned row is hashed. 
Pretty much in parallel, the orders table (750k) is scanned and filtered also for custkey=1. For column store, we use dynamic scan here resulting in less page reads (816 vs. 945). Then this is also hashed and then joined with the customer row from the first hash. Then we scan the lineitem table (ca. 15mio entries) and join it with the other two tables and in the end aggregate over the table to get the sum of taxes. Column store performs better here since for the aggregate function, we can simple browse through the row where all taxes are stored. For row store, we have to go through the whole lineitem table and jump to the tax column and add it to the other rows, using up more time. 




2) Case where row store is better than column store

QUERY A: column store
**********************
insert into customer (c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_comment) 
select * 
from supplier 
where s_suppkey=2; 

Time: 159.508 ms

****************************************************************
QUERY A PLAN                                
--------------------------------------------------------------------------
 Insert  (cost=0.00..434.14 rows=1 width=48)
   ->  Result  (cost=0.00..434.02 rows=1 width=60)
         ->  Table Scan on supplier  (cost=0.00..434.02 rows=1 width=146)
               Filter: s_suppkey = 2
 Optimizer status: PQO version 2.56.3
(5 rows)

****************************************************************



QUERY B: row store
**********************

insert into customer2 (c_custkey, c_name, c_address, c_nationkey, c_phone, c_acctbal, c_comment) 
select * 
from supplier2 
where s_suppkey=2;

Time: 63.419 ms


****************************************************************
QUERY B PLAN                            
--------------------------------------------------------------------------
 Insert  (cost=0.00..431.12 rows=1 width=48)
   ->  Result  (cost=0.00..431.00 rows=1 width=60)
         ->  Table Scan on supplier2  (cost=0.00..431.00 rows=1 width=87)
               Filter: s_suppkey = 2
 Optimizer status: PQO version 2.56.3
(5 rows)

****************************************************************


EXPLANATION: 
**********************
For Query A we first scan all columns from the supplier table and filter where the suppkey is 2. This returns only one row from supplier. For row store, this is convenient, since this row is already stored as a row. But for column store, we have to jump around to reconstruct this actual row, since the rows of the column store actually consist of rows. 
To insert the values in the customer table is also different. For row store, we can simply add the row at the bottom. but for column store, we have to browse each column/row inserting the new value, making this more time intensive. 


COLUMN store is good for  analytical workloads and for the single to few accesses and the ROW store is good for transactional workloads and for a s single row accesses.
